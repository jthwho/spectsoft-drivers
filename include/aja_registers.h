/* AJA CARD REGISTERS 
 * THIS FILE IS AUTOMATICALY GENERATED BY THE SPECTSOFT AJA-DRIVER PACKAGE */


#ifndef _AJA_REGISTERS_H_
#define _AJA_REGISTERS_H_


#ifndef __KERNEL__
#include <stdint.h>
#endif

typedef struct {
	uint32_t add;
	uint32_t shift;
	uint32_t mask;
} aja_register_t;



/* 1080p50/60 dual link output enable (Reg 0, bits 15 to 15) [Read/Write] */
/* __ Settings __
 * 0: disabled
 * 1: enabled */
const aja_register_t ajareg_1080pdual = {0x0u, 15u, 0x00008000u};


/* Audio Capture Enable (Reg 24, bits 0 to 0) [Read/Write] */
const aja_register_t ajareg_acapenable = {0x60u, 0u, 0x00000001u};


/* Audio Capture Last Address (Reg 27, bits 0 to 19) [Read Only] */
const aja_register_t ajareg_acaplast = {0x6Cu, 0u, 0x000FFFFFu};


/* Audio Capture Reset (Reg 24, bits 8 to 8) [Read/Write] */
const aja_register_t ajareg_acapreset = {0x60u, 8u, 0x00000100u};


/* Audio Capture Wrap IRQ Active (depreciated) (Reg 21, bits 26 to 26) [Read Only] */
const aja_register_t ajareg_acapwrapirq = {0x54u, 26u, 0x04000000u};


/* Audio Capture Wrap IRQ Clear (depreciated) (Reg 20, bits 26 to 26) [Write Only] */
const aja_register_t ajareg_acapwrapirqclear = {0x50u, 26u, 0x04000000u};


/* Audio Capture Wrap IRQ Enable (depreciated) (Reg 20, bits 5 to 5) [Read/Write] */
const aja_register_t ajareg_acapwrapirqenable = {0x50u, 5u, 0x00000020u};


/* AES 1/2 Invalid Data (Reg 22, bits 24 to 24) [Read Only] */
const aja_register_t ajareg_aes12invalid = {0x58u, 24u, 0x01000000u};


/* AES 3/4 Invalid Data (Reg 22, bits 25 to 25) [Read Only] */
const aja_register_t ajareg_aes34invalid = {0x58u, 25u, 0x02000000u};


/* AES 5/6 Invalid Data (Reg 22, bits 26 to 26) [Read Only] */
const aja_register_t ajareg_aes56invalid = {0x58u, 26u, 0x04000000u};


/* AES 7/8 Invalid Data (Reg 22, bits 27 to 27) [Read Only] */
const aja_register_t ajareg_aes78invalid = {0x58u, 27u, 0x08000000u};


/* AES/EBU Supported (Reg 24, bits 21 to 21) [Read Only] */
const aja_register_t ajareg_aessup = {0x60u, 21u, 0x00200000u};


/* Audio Buffer 1/2 Select (Reg 25, bits 0 to 3) [Read/Write] */
/* __ Settings __
 * 0: aes
 * 1: sdi_g1c12
 * 2: sdi_g1c34
 * 3: sdi_g2c12
 * 4: sdi_g2c34
 * 5: sdi_g3c12
 * 6: sdi_g3c34
 * 7: sdi_g4c12
 * 8: sdi_g4c34 */
const aja_register_t ajareg_ain12select = {0x64u, 0u, 0x0000000Fu};


/* Audio Buffer 3/4 Select (Reg 25, bits 4 to 7) [Read/Write] */
/* __ Settings __
 * 0: aes
 * 1: sdi_g1c12
 * 2: sdi_g1c34
 * 3: sdi_g2c12
 * 4: sdi_g2c34
 * 5: sdi_g3c12
 * 6: sdi_g3c34
 * 7: sdi_g4c12
 * 8: sdi_g4c34 */
const aja_register_t ajareg_ain34select = {0x64u, 4u, 0x000000F0u};


/* Audio Buffer 5/6 Select (Reg 25, bits 8 to 11) [Read/Write] */
/* __ Settings __
 * 0: aes
 * 1: sdi_g1c12
 * 2: sdi_g1c34
 * 3: sdi_g2c12
 * 4: sdi_g2c34
 * 5: sdi_g3c12
 * 6: sdi_g3c34
 * 7: sdi_g4c12
 * 8: sdi_g4c34 */
const aja_register_t ajareg_ain56select = {0x64u, 8u, 0x00000F00u};


/* Audio Buffer 7/8 Select (Reg 25, bits 12 to 15) [Read/Write] */
/* __ Settings __
 * 0: aes
 * 1: sdi_g1c12
 * 2: sdi_g1c34
 * 3: sdi_g2c12
 * 4: sdi_g2c34
 * 5: sdi_g3c12
 * 6: sdi_g3c34
 * 7: sdi_g4c12
 * 8: sdi_g4c34 */
const aja_register_t ajareg_ain78select = {0x64u, 12u, 0x0000F000u};


/* Audio Mute Ch 1/2 (Reg 24, bits 4 to 4) [Read/Write] */
/* __ Settings __
 * 0: off
 * 1: on */
const aja_register_t ajareg_amute12 = {0x60u, 4u, 0x00000010u};


/* Audio Mute Ch 3/4 (Reg 24, bits 5 to 5) [Read/Write] */
/* __ Settings __
 * 0: off
 * 1: on */
const aja_register_t ajareg_amute34 = {0x60u, 5u, 0x00000020u};


/* Audio Mute Ch 5/6 (Reg 24, bits 6 to 6) [Read/Write] */
/* __ Settings __
 * 0: off
 * 1: on */
const aja_register_t ajareg_amute56 = {0x60u, 6u, 0x00000040u};


/* Audio Mute Ch 7/8 (Reg 24, bits 17 to 17) [Read/Write] */
/* __ Settings __
 * 0: off
 * 1: on */
const aja_register_t ajareg_amute78 = {0x60u, 17u, 0x00020000u};


/* Analog Out - DAC Mode (Reg 128, bits 0 to 4) [Read/Write] */
/* __ Settings __
 * 9: 1080i_rgb
 * 15: 1080i_rgb_vga
 * 12: 1080i_ypbpr
 * 10: 1080psf_rgb
 * 16: 1080psf_rgb_vga
 * 13: 1080psf_ypbpr
 * 4: 480i_composite
 * 5: 480i_composite_japan
 * 0: 480i_rgb
 * 2: 480i_ypbpb_betacam
 * 3: 480i_ypbpr_japan
 * 1: 480i_ypbpr_smpte
 * 8: 576i_composite
 * 6: 576i_rgb
 * 7: 576i_ypbpr_smpte
 * 11: 720p_rgb
 * 17: 720p_rgb_vga
 * 14: 720p_ypbpr */
const aja_register_t ajareg_aoutdac = {0x200u, 0u, 0x0000001Fu};


/* Analog Out Crosspoint (Reg 138, bits 0 to 7) [Read/Write] */
/* __ Settings __
 * 0: black
 * 0x88: chan1_rgb
 * 8: chan1_ycbcr
 * 0x8F: chan2_rgb
 * 0xF: chan2_ycbcr
 * 0x85: csconv1_rgb
 * 5: csconv1_ycbcr
 * 0x90: csconv2_rgb
 * 0x10: csconv2_ycbcr
 * 0x83: dlinput
 * 0xB: dlout
 * 1: input1
 * 2: input2
 * 0x84: lut1_rgb
 * 4: lut1_ycbcr
 * 0x8D: lut2_rgb
 * 0x12: mix_ycbcr
 * 6: resconv
 * 0x89: sync1_rgb
 * 9: sync1_ycbcr
 * 0x8A: sync2_rgb
 * 0xA: sync2_ycbcr */
const aja_register_t ajareg_aoutxpt = {0x228u, 0u, 0x000000FFu};


/* Audio Playback Last Address (Reg 26, bits 0 to 19) [Read Only] */
const aja_register_t ajareg_aplaylast = {0x68u, 0u, 0x000FFFFFu};


/* Audio Playback Pause (Reg 24, bits 11 to 11) [Read/Write] */
const aja_register_t ajareg_aplaypause = {0x60u, 11u, 0x00000800u};


/* Audio Playback Reset (Reg 24, bits 9 to 9) [Read/Write] */
const aja_register_t ajareg_aplayreset = {0x60u, 9u, 0x00000200u};


/* Audio 20bit Output (Reg 24, bits 2 to 2) [Read/Write] */
/* __ Settings __
 * 1: 20bit
 * 0: 24bit */
const aja_register_t ajareg_aplaysize = {0x60u, 2u, 0x00000004u};


/* Audio Playback Wrap IRQ Active (depreciated) (Reg 21, bits 27 to 27) [Read Only] */
const aja_register_t ajareg_aplaywrapirq = {0x54u, 27u, 0x08000000u};


/* Audio Playback Wrap IRQ Clear (depreciated) (Reg 20, bits 27 to 27) [Write Only] */
const aja_register_t ajareg_aplaywrapirqclear = {0x50u, 27u, 0x08000000u};


/* Audio Playback Wrap IRQ Enable (depreciated) (Reg 20, bits 4 to 4) [Read/Write] */
const aja_register_t ajareg_aplaywrapirqenable = {0x50u, 4u, 0x00000010u};


/* Audio Tone Output Enable (Reg 24, bits 1 to 1) [Read/Write] */
/* __ Settings __
 * 0: disabled
 * 1: enabled */
const aja_register_t ajareg_atoneoutput = {0x60u, 1u, 0x00000002u};


/* Enable 16 channels of audio (Reg 24, bits 20 to 20) [Read/Write] */
/* __ Settings __
 * 0: disabled
 * 1: enabled */
const aja_register_t ajareg_audio16chan = {0x60u, 20u, 0x00100000u};


/* Enable 8 channels of audio (Reg 24, bits 16 to 16) [Read/Write] */
/* __ Settings __
 * 0: disabled
 * 1: enabled */
const aja_register_t ajareg_audio8chan = {0x60u, 16u, 0x00010000u};


/* 8 Channel Audio Supported (Reg 24, bits 23 to 23) [Read Only] */
const aja_register_t ajareg_audio8chansup = {0x60u, 23u, 0x00800000u};


/* Enable 96KHz audio sample rate (Reg 24, bits 18 to 18) [Read/Write] */
/* __ Settings __
 * 0: disabled
 * 1: enabled */
const aja_register_t ajareg_audio96khz = {0x60u, 18u, 0x00040000u};


/* Audio Buffer Size (Reg 24, bits 30 to 31) [Read/Write] */
/* __ Settings __
 * 0: 1MB
 * 1: 4MB */
const aja_register_t ajareg_audiobigbuffer = {0x60u, 30u, 0xC0000000u};


/* Audio Cable Type (Reg 24, bits 27 to 28) [Read Only] */
/* __ Settings __
 * 0: bnc
 * 1: kbox
 * 2: xlr */
const aja_register_t ajareg_audiocable = {0x60u, 27u, 0x18000000u};


/* 48KHz Audio Counter (Reg 28, bits 0 to 31) [Read Only] */
const aja_register_t ajareg_audiocount = {0x70u, 0u, 0xFFFFFFFFu};


/* Audio 50Hz IRQ Active (depreciated) (Reg 21, bits 28 to 28) [Read Only] */
const aja_register_t ajareg_audioirq = {0x54u, 28u, 0x10000000u};


/* Audio 50Hz IRQ Clear (depreciated) (Reg 20, bits 28 to 28) [Write Only] */
const aja_register_t ajareg_audioirqclear = {0x50u, 28u, 0x10000000u};


/* Audio 50Hz IRQ Enable (depreciated) (Reg 20, bits 3 to 3) [Read/Write] */
const aja_register_t ajareg_audioirqenable = {0x50u, 3u, 0x00000008u};


/* Audio Loopback Enable (Reg 24, bits 3 to 3) [Read/Write] */
/* __ Settings __
 * 0: disabled
 * 1: enabled */
const aja_register_t ajareg_audioloopback = {0x60u, 3u, 0x00000008u};


/* Enable raw AES/EBU recording from ch1&2 (Reg 24, bits 19 to 19) [Read/Write] */
/* __ Settings __
 * 0: disabled
 * 1: enabled */
const aja_register_t ajareg_audioraw = {0x60u, 19u, 0x00080000u};


/* Audio Wrap IRQ Active (Reg 21, bits 25 to 25) [Read Only] */
const aja_register_t ajareg_audiowrapirq = {0x54u, 25u, 0x02000000u};


/* Audio Wrap IRQ Clear (Reg 20, bits 25 to 25) [Write Only] */
const aja_register_t ajareg_audiowrapirqclear = {0x50u, 25u, 0x02000000u};


/* Audio Wrap IRQ Enable (Reg 20, bits 6 to 6) [Read/Write] */
const aja_register_t ajareg_audiowrapirqenable = {0x50u, 6u, 0x00000040u};


/* Board ID (Reg 50, bits 0 to 31) [Read Only] */
const aja_register_t ajareg_boardid = {0xC8u, 0u, 0xFFFFFFFFu};


/* Board Version Number (Reg 21, bits 0 to 3) [Read Only] */
const aja_register_t ajareg_boardversion = {0x54u, 0u, 0x0000000Fu};


/* Bus Error IRQ Active (Reg 48, bits 31 to 31) [Read Only] */
const aja_register_t ajareg_buserrorirq = {0xC0u, 31u, 0x80000000u};


/* Clear Bus Error IRQ Error (Reg 49, bits 31 to 31) [Write Only] */
const aja_register_t ajareg_buserrorirqclear = {0xC4u, 31u, 0x80000000u};


/* Bus Error IRQ Enable (Reg 49, bits 4 to 4) [Read/Write] */
const aja_register_t ajareg_buserrorirqenable = {0xC4u, 4u, 0x00000010u};


/* Chan 1 Alpha from Input 2 (Reg 1, bits 5 to 5) [Read/Write] */
/* __ Settings __
 * 0: disabled
 * 1: enabled */
const aja_register_t ajareg_ch1alphainput2 = {0x4u, 5u, 0x00000020u};


/* Chan 1 Dither Input (Reg 1, bits 16 to 16) [Read/Write] */
/* __ Settings __
 * 0: disabled
 * 1: enabled */
const aja_register_t ajareg_ch1dither = {0x4u, 16u, 0x00010000u};


/* DRT Display? (Reg 1, bits 11 to 11) [Read/Write] */
/* __ Settings __
 * 0: disabled
 * 1: enabled */
const aja_register_t ajareg_ch1drtdisplay = {0x4u, 11u, 0x00000800u};


/* Chan 1 extended format (Reg 1, bits 6 to 6) [Read/Write] */
/* __ Settings __
 * 0: disabled
 * 1: enabled */
const aja_register_t ajareg_ch1extformat = {0x4u, 6u, 0x00000040u};


/* Chan 1 Flip Vertical (Reg 1, bits 10 to 10) [Read/Write] */
/* __ Settings __
 * 0: disabled
 * 1: enabled */
const aja_register_t ajareg_ch1flipvert = {0x4u, 10u, 0x00000400u};


/* Chan 1 Format (Reg 1, bits 1 to 4) [Read/Write] */
/* __ Settings __
 * 3: argb8
 * 13: bgr8
 * 2: bgra8
 * 7: dpx_rgb10
 * 15: dpx_rgb10_le
 * 8: dpx_ycbcr10
 * 4: rgb10
 * 12: rgb8
 * 6: rgba8
 * 0: ycbcr10
 * 1: ycbcr8
 * 9: ycbcr8_dvcpro
 * 11: ycbcr8_hdv
 * 10: ycbcr8_qrez
 * 5: ycbcr8_rev */
const aja_register_t ajareg_ch1format = {0x4u, 1u, 0x0000001Eu};


/* Chan 1 Frame Size (Reg 1, bits 21 to 22) [Read Only] */
/* __ Settings __
 * 3: 16mb
 * 0: 2mb
 * 1: 4mb
 * 2: 8mb */
const aja_register_t ajareg_ch1framesize = {0x4u, 21u, 0x00600000u};


/* Chan 1 Input Frame (Reg 4, bits 0 to 31) [Read/Write] */
const aja_register_t ajareg_ch1input = {0x10u, 0u, 0xFFFFFFFFu};


/* Chan 1 LUT Control (Reg 68, bits 0 to 31) [Read/Write] */
const aja_register_t ajareg_ch1lutcont = {0x110u, 0u, 0xFFFFFFFFu};


/* Chan 1 Mode (Reg 1, bits 0 to 0) [Read/Write] */
/* __ Settings __
 * 1: capture
 * 0: playback */
const aja_register_t ajareg_ch1mode = {0x4u, 0u, 0x00000001u};


/* Chan 1 Output Frame (Reg 3, bits 0 to 31) [Read/Write] */
const aja_register_t ajareg_ch1output = {0xCu, 0u, 0xFFFFFFFFu};


/* Chan 1 PCI Frame (Reg 2, bits 0 to 31) [Read/Write] */
const aja_register_t ajareg_ch1pciframe = {0x8u, 0u, 0xFFFFFFFFu};


/* RGB Range (Reg 1, bits 24 to 24) [Read/Write] */
/* __ Settings __
 * 0: black@0x00
 * 1: black@0x40 */
const aja_register_t ajareg_ch1rgbrange = {0x4u, 24u, 0x01000000u};


/* Chan 1 RP188 Bits 0-31 (Reg 30, bits 0 to 31) [Read/Write] */
const aja_register_t ajareg_ch1rp188_1 = {0x78u, 0u, 0xFFFFFFFFu};


/* Chan 1 RP188 Bits 32-63 (Reg 31, bits 0 to 31) [Read/Write] */
const aja_register_t ajareg_ch1rp188_2 = {0x7Cu, 0u, 0xFFFFFFFFu};


/* Chan 1 RP188 DBB (Reg 29, bits 0 to 31) [Read/Write] */
const aja_register_t ajareg_ch1rp188dbb = {0x74u, 0u, 0xFFFFFFFFu};


/* Chan 1 RP188 DBB 1 (Reg 29, bits 0 to 7) [Read/Write] */
const aja_register_t ajareg_ch1rp188dbb1 = {0x74u, 0u, 0x000000FFu};


/* Chan 1 RP188 DBB 2 (Reg 29, bits 8 to 15) [Read/Write] */
const aja_register_t ajareg_ch1rp188dbb2 = {0x74u, 8u, 0x0000FF00u};


/* Chan 1 RP188 filter (Reg 29, bits 24 to 31) [Read/Write] */
const aja_register_t ajareg_ch1rp188filter = {0x74u, 24u, 0xFF000000u};


/* Chan 1 RP-188 Output (Reg 0, bits 28 to 28) [Read/Write] */
/* __ Settings __
 * 0: disabled
 * 1: enabled */
const aja_register_t ajareg_ch1rp188out = {0x0u, 28u, 0x10000000u};


/* Chan 1 RP188 recieved (Reg 29, bits 16 to 16) [Read Only] */
const aja_register_t ajareg_ch1rp188recv = {0x74u, 16u, 0x00010000u};


/* Chan 1 RP188 recieved valid (Reg 29, bits 17 to 17) [Read Only] */
const aja_register_t ajareg_ch1rp188valid = {0x74u, 17u, 0x00020000u};


/* Chan 1 Single Field (Reg 1, bits 12 to 12) [Read/Write] */
/* __ Settings __
 * 0: disabled
 * 1: enabled */
const aja_register_t ajareg_ch1sfield = {0x4u, 12u, 0x00001000u};


/* Chan 1 Horizontal Squeeze (Reg 1, bits 9 to 9) [Read/Write] */
/* __ Settings __
 * 0: disabled
 * 1: enabled */
const aja_register_t ajareg_ch1squeeze = {0x4u, 9u, 0x00000200u};


/* Chan 1 Writeback (Reg 1, bits 8 to 8) [Read/Write] */
/* __ Settings __
 * 0: disabled
 * 1: enabled */
const aja_register_t ajareg_ch1writeback = {0x4u, 8u, 0x00000100u};


/* Chan 2 Disable (Reg 5, bits 7 to 7) [Read/Write] */
/* __ Settings __
 * 0: disabled
 * 1: enabled */
const aja_register_t ajareg_ch2disable = {0x14u, 7u, 0x00000080u};


/* Chan 2 Dither Input (Reg 5, bits 16 to 16) [Read/Write] */
/* __ Settings __
 * 0: disabled
 * 1: enabled */
const aja_register_t ajareg_ch2dither = {0x14u, 16u, 0x00010000u};


/* Chan 2 Flip Vertical (Reg 5, bits 10 to 10) [Read/Write] */
/* __ Settings __
 * 0: disabled
 * 1: enabled */
const aja_register_t ajareg_ch2flipvert = {0x14u, 10u, 0x00000400u};


/* Chan 2 Format (Reg 5, bits 1 to 4) [Read/Write] */
/* __ Settings __
 * 3: argb8
 * 13: bgr8
 * 2: bgra8
 * 7: dpx_rgb10
 * 15: dpx_rgb10_le
 * 8: dpx_ycbcr10
 * 4: rgb10
 * 12: rgb8
 * 6: rgba8
 * 0: ycbcr10
 * 1: ycbcr8
 * 9: ycbcr8_dvcpro
 * 11: ycbcr8_hdv
 * 10: ycbcr8_qrez
 * 5: ycbcr8_rev */
const aja_register_t ajareg_ch2format = {0x14u, 1u, 0x0000001Eu};


/* Chan 2 Input Frame (Reg 8, bits 0 to 31) [Read/Write] */
const aja_register_t ajareg_ch2input = {0x20u, 0u, 0xFFFFFFFFu};


/* Chan 2 Mode (Reg 5, bits 0 to 0) [Read/Write] */
/* __ Settings __
 * 1: capture
 * 0: playback */
const aja_register_t ajareg_ch2mode = {0x14u, 0u, 0x00000001u};


/* Chan 2 Output Frame (Reg 7, bits 0 to 31) [Read/Write] */
const aja_register_t ajareg_ch2output = {0x1Cu, 0u, 0xFFFFFFFFu};


/* Chan 2 PCI Frame (Reg 6, bits 0 to 31) [Read/Write] */
const aja_register_t ajareg_ch2pciframe = {0x18u, 0u, 0xFFFFFFFFu};


/* Input/Output 2 RP188 low (Reg 65, bits 0 to 31) [Read/Write] */
const aja_register_t ajareg_ch2rp188_1 = {0x104u, 0u, 0xFFFFFFFFu};


/* Input/Output 2 RP188 high (Reg 66, bits 0 to 31) [Read/Write] */
const aja_register_t ajareg_ch2rp188_2 = {0x108u, 0u, 0xFFFFFFFFu};


/* Input/Output 2 RP188 DBB (Reg 64, bits 0 to 31) [Read/Write] */
const aja_register_t ajareg_ch2rp188dbb = {0x100u, 0u, 0xFFFFFFFFu};


/* Channel 2 RP188 filter (Reg 64, bits 24 to 31) [Read/Write] */
const aja_register_t ajareg_ch2rp188filter = {0x100u, 24u, 0xFF000000u};


/* Chan 2 RP-188 Output (Reg 0, bits 29 to 29) [Read/Write] */
/* __ Settings __
 * 0: disabled
 * 1: enabled */
const aja_register_t ajareg_ch2rp188out = {0x0u, 29u, 0x20000000u};


/* Input 2 RP188 Valid (Reg 64, bits 17 to 17) [Read Only] */
const aja_register_t ajareg_ch2rp188valid = {0x100u, 17u, 0x00020000u};


/* Chan 2 Single Field (Reg 5, bits 12 to 12) [Read/Write] */
/* __ Settings __
 * 0: disabled
 * 1: enabled */
const aja_register_t ajareg_ch2sfield = {0x14u, 12u, 0x00001000u};


/* Chan 2 Viper Squeeze (Reg 5, bits 9 to 9) [Read/Write] */
/* __ Settings __
 * 0: disabled
 * 1: enabled */
const aja_register_t ajareg_ch2viper = {0x14u, 9u, 0x00000200u};


/* Channel 1 Crosspoint (Reg 137, bits 0 to 7) [Read/Write] */
/* __ Settings __
 * 0: black
 * 0x85: csconv1_rgb
 * 5: csconv1_ycbcr
 * 0x90: csconv2_rgb
 * 0x10: csconv2_ycbcr
 * 0x83: dlinput
 * 1: input1
 * 2: input2
 * 0x84: lut1_rgb
 * 4: lut1_ycbcr
 * 0x8D: lut2_rgb
 * 6: resconv */
const aja_register_t ajareg_chan1xpt = {0x224u, 0u, 0x000000FFu};


/* FrameBuffer 2 Crosspoint (Reg 140, bits 0 to 7) [Read/Write] */
/* __ Settings __
 * 0: black
 * 0x88: chan1_rgb
 * 5: csconv1_ycbcr
 * 0x90: csconv2_rgb
 * 0x10: csconv2_ycbcr
 * 0x83: dlinput
 * 1: input1
 * 2: input2
 * 0x84: lut1_rgb
 * 4: lut1_ycbcr
 * 0x8D: lut2_rgb */
const aja_register_t ajareg_chan2xpt = {0x230u, 0u, 0x000000FFu};


/* Color Correction Bank Select (Reg 0, bits 30 to 31) [Read/Write] */
/* __ Settings __
 * 0: ch1bank0
 * 1: ch1bank1
 * 2: ch2bank0
 * 3: ch2bank1 */
const aja_register_t ajareg_clutbank = {0x0u, 30u, 0xC0000000u};


/* Compressor Crosspoint (Reg 136, bits 24 to 31) [Read/Write] */
/* __ Settings __
 * 0: black */
const aja_register_t ajareg_compressxpt = {0x220u, 24u, 0xFF000000u};


/* Colorspace Converter 1 make alpha from key (Reg 142, bits 29 to 29) [Read/Write] */
/* __ Settings __
 * 0: disabled
 * 1: enabled */
const aja_register_t ajareg_csconv1alphafromkey = {0x238u, 29u, 0x20000000u};


/* Colorspace Converter 1 Custom Coefficient 0 (Reg 142, bits 0 to 10) [Read/Write] */
const aja_register_t ajareg_csconv1coef0 = {0x238u, 0u, 0x000007FFu};


/* Colorspace Converter 1 Custom Coefficient 1 (Reg 142, bits 16 to 26) [Read/Write] */
const aja_register_t ajareg_csconv1coef1 = {0x238u, 16u, 0x07FF0000u};


/* Colorspace Converter 1 Custom Coefficient 2 (Reg 143, bits 0 to 10) [Read/Write] */
const aja_register_t ajareg_csconv1coef2 = {0x23Cu, 0u, 0x000007FFu};


/* Colorspace Converter 1 Custom Coefficient 3 (Reg 143, bits 16 to 26) [Read/Write] */
const aja_register_t ajareg_csconv1coef3 = {0x23Cu, 16u, 0x07FF0000u};


/* Colorspace Converter 1 Custom Coefficient 4 (Reg 144, bits 0 to 10) [Read/Write] */
const aja_register_t ajareg_csconv1coef4 = {0x240u, 0u, 0x000007FFu};


/* Colorspace Converter 1 Custom Coefficient 5 (Reg 144, bits 16 to 26) [Read/Write] */
const aja_register_t ajareg_csconv1coef5 = {0x240u, 16u, 0x07FF0000u};


/* Colorspace Converter 1 Custom Coefficient 6 (Reg 145, bits 0 to 10) [Read/Write] */
const aja_register_t ajareg_csconv1coef6 = {0x244u, 0u, 0x000007FFu};


/* Colorspace Converter 1 Custom Coefficient 7 (Reg 145, bits 16 to 26) [Read/Write] */
const aja_register_t ajareg_csconv1coef7 = {0x244u, 16u, 0x07FF0000u};


/* Colorspace Converter 1 Custom Coefficient 8 (Reg 146, bits 0 to 10) [Read/Write] */
const aja_register_t ajareg_csconv1coef8 = {0x248u, 0u, 0x000007FFu};


/* Colorspace Converter 1 Custom Coefficient 9 (Reg 146, bits 16 to 26) [Read/Write] */
const aja_register_t ajareg_csconv1coef9 = {0x248u, 16u, 0x07FF0000u};


/* Colorspace Converter 1 use custom coefficents (Reg 142, bits 31 to 31) [Read/Write] */
/* __ Settings __
 * 0: disabled
 * 1: enabled */
const aja_register_t ajareg_csconv1customcoef = {0x238u, 31u, 0x80000000u};


/* Colorspace Converter 1 Coefficient (Reg 142, bits 30 to 30) [Read/Write] */
/* __ Settings __
 * 0: hd_coeff
 * 1: sd_coeff */
const aja_register_t ajareg_csconv1mode = {0x238u, 30u, 0x40000000u};


/* Colorspace Converter 1 RGB range (Reg 143, bits 31 to 31) [Read/Write] */
/* __ Settings __
 * 0: 0x0-0x3FF
 * 1: 0x40-0x3C0 */
const aja_register_t ajareg_csconv1rgbrange = {0x23Cu, 31u, 0x80000000u};


/* Colorspace Converter 1 sync fail (Reg 142, bits 28 to 28) [Read Only] */
const aja_register_t ajareg_csconv1syncfail = {0x238u, 28u, 0x10000000u};


/* Colorspace Converter 1 Crosspoint (Reg 136, bits 8 to 15) [Read/Write] */
/* __ Settings __
 * 0: black
 * 0x88: chan1_rgb
 * 8: chan1_ycbcr
 * 0x8F: chan2_rgb
 * 0xF: chan2_ycbcr
 * 0x83: dlinput
 * 1: input1
 * 2: input2
 * 0x84: lut1_rgb
 * 0x8D: lut2_rgb
 * 6: resconv */
const aja_register_t ajareg_csconv1xpt = {0x220u, 8u, 0x0000FF00u};


/* Colorspace Converter 2 make alpha from key (Reg 147, bits 29 to 29) [Read/Write] */
/* __ Settings __
 * 0: disabled
 * 1: enabled */
const aja_register_t ajareg_csconv2alphafromkey = {0x24Cu, 29u, 0x20000000u};


/* Colorspace Converter 2 Custom Coefficient 0 (Reg 147, bits 0 to 10) [Read/Write] */
const aja_register_t ajareg_csconv2coef0 = {0x24Cu, 0u, 0x000007FFu};


/* Colorspace Converter 2 Custom Coefficient 1 (Reg 147, bits 16 to 26) [Read/Write] */
const aja_register_t ajareg_csconv2coef1 = {0x24Cu, 16u, 0x07FF0000u};


/* Colorspace Converter 2 Custom Coefficient 2 (Reg 148, bits 0 to 10) [Read/Write] */
const aja_register_t ajareg_csconv2coef2 = {0x250u, 0u, 0x000007FFu};


/* Colorspace Converter 2 Custom Coefficient 3 (Reg 148, bits 16 to 26) [Read/Write] */
const aja_register_t ajareg_csconv2coef3 = {0x250u, 16u, 0x07FF0000u};


/* Colorspace Converter 2 Custom Coefficient 4 (Reg 149, bits 0 to 10) [Read/Write] */
const aja_register_t ajareg_csconv2coef4 = {0x254u, 0u, 0x000007FFu};


/* Colorspace Converter 2 Custom Coefficient 5 (Reg 149, bits 16 to 26) [Read/Write] */
const aja_register_t ajareg_csconv2coef5 = {0x254u, 16u, 0x07FF0000u};


/* Colorspace Converter 2 Custom Coefficient 6 (Reg 150, bits 0 to 10) [Read/Write] */
const aja_register_t ajareg_csconv2coef6 = {0x258u, 0u, 0x000007FFu};


/* Colorspace Converter 2 Custom Coefficient 7 (Reg 150, bits 16 to 26) [Read/Write] */
const aja_register_t ajareg_csconv2coef7 = {0x258u, 16u, 0x07FF0000u};


/* Colorspace Converter 2 Custom Coefficient 8 (Reg 151, bits 0 to 10) [Read/Write] */
const aja_register_t ajareg_csconv2coef8 = {0x25Cu, 0u, 0x000007FFu};


/* Colorspace Converter 2 Custom Coefficient 9 (Reg 151, bits 16 to 26) [Read/Write] */
const aja_register_t ajareg_csconv2coef9 = {0x25Cu, 16u, 0x07FF0000u};


/* Colorspace Converter 2 use custom coefficents (Reg 147, bits 31 to 31) [Read/Write] */
/* __ Settings __
 * 0: disabled
 * 1: enabled */
const aja_register_t ajareg_csconv2customcoef = {0x24Cu, 31u, 0x80000000u};


/* ColorSpace Converter 2 Key Crosspoint (Reg 140, bits 24 to 31) [Read/Write] */
/* __ Settings __
 * 0: black
 * 1: input1
 * 2: input2 */
const aja_register_t ajareg_csconv2keyxpt = {0x230u, 24u, 0xFF000000u};


/* Colorspace Converter 2 Coefficient (Reg 147, bits 30 to 30) [Read/Write] */
/* __ Settings __
 * 0: hd_coeff
 * 1: sd_coeff */
const aja_register_t ajareg_csconv2mode = {0x24Cu, 30u, 0x40000000u};


/* Colorspace Converter 2 RGB range (Reg 148, bits 31 to 31) [Read/Write] */
/* __ Settings __
 * 0: 0x0-0x3FF
 * 1: 0x40-0x3C0 */
const aja_register_t ajareg_csconv2rgbrange = {0x250u, 31u, 0x80000000u};


/* Colorspace Converter 2 sync fail (Reg 147, bits 28 to 28) [Read Only] */
const aja_register_t ajareg_csconv2syncfail = {0x24Cu, 28u, 0x10000000u};


/* Colorspace Converter 2 Crosspoint (Reg 140, bits 16 to 23) [Read/Write] */
/* __ Settings __
 * 0: black
 * 0x88: chan1_rgb
 * 8: chan1_ycbcr
 * 0x8F: chan2_rgb
 * 0xF: chan2_ycbcr
 * 0x83: dlinput
 * 1: input1
 * 2: input2
 * 0x84: lut1_rgb
 * 0x8D: lut2_rgb
 * 6: resconv */
const aja_register_t ajareg_csconv2xpt = {0x230u, 16u, 0x00FF0000u};


/* ColorSpace Converter Key Crosspoint (Reg 138, bits 24 to 31) [Read/Write] */
/* __ Settings __
 * 0: black
 * 7: compress
 * 1: input1
 * 2: input2 */
const aja_register_t ajareg_csconvkeyxpt = {0x228u, 24u, 0xFF000000u};


/* Colorspace Converter 1 Crosspoint (Reg 136, bits 8 to 15) [Read/Write] */
/* __ Settings __
 * 0: black
 * 0x88: chan1_rgb
 * 8: chan1_ycbcr
 * 0x8F: chan2_rgb
 * 0xF: chan2_ycbcr
 * 0x83: dlinput
 * 1: input1
 * 2: input2
 * 0x84: lut1_rgb
 * 0x8D: lut2_rgb
 * 6: resconv */
const aja_register_t ajareg_csconvxpt = {0x220u, 8u, 0x0000FF00u};


/* Detect 64bit PCI (Reg 48, bits 5 to 5) [Read Only] */
const aja_register_t ajareg_detect64bit = {0xC0u, 5u, 0x00000020u};


/* Enable Dual Link Input (Reg 0, bits 23 to 23) [Read/Write] */
/* __ Settings __
 * 0: disabled
 * 1: enabled */
const aja_register_t ajareg_dlinput = {0x0u, 23u, 0x00800000u};


/* Enable Dual Link Output (Reg 0, bits 27 to 27) [Read/Write] */
/* __ Settings __
 * 0: disabled
 * 1: enabled */
const aja_register_t ajareg_dloutput = {0x0u, 27u, 0x08000000u};


/* Dual-Link Output Crosspoint (Reg 137, bits 24 to 31) [Read/Write] */
/* __ Settings __
 * 0: black
 * 0x88: chan1_rgb
 * 0x8F: chan2_rgb
 * 7: compress
 * 0x85: csconv1_rgb
 * 0x90: csconv2_rgb
 * 0x83: dlinput
 * 0x84: lut1_rgb
 * 0x8D: lut2_rgb */
const aja_register_t ajareg_dloutxpt = {0x224u, 24u, 0xFF000000u};


/* DMA 1 Busy (Reg 48, bits 0 to 0) [Read Only] */
const aja_register_t ajareg_dma1busy = {0xC0u, 0u, 0x00000001u};


/* DMA 1 Card Address (Reg 33, bits 0 to 29) [Read/Write] */
const aja_register_t ajareg_dma1cadd = {0x84u, 0u, 0x3FFFFFFFu};


/* DMA 1 Word Count (Reg 34, bits 0 to 31) [Read/Write] */
const aja_register_t ajareg_dma1count = {0x88u, 0u, 0xFFFFFFFFu};


/* DMA 1 GO (Reg 48, bits 0 to 0) [Write Only] */
const aja_register_t ajareg_dma1go = {0xC0u, 0u, 0x00000001u};


/* DMA 1 Host Address (Reg 32, bits 0 to 31) [Read/Write] */
const aja_register_t ajareg_dma1hadd = {0x80u, 0u, 0xFFFFFFFFu};


/* DMA 1 Host Address (MSB 32) (Reg 100, bits 0 to 31) [Read/Write] */
const aja_register_t ajareg_dma1hadd_high = {0x190u, 0u, 0xFFFFFFFFu};


/* DMA 1 IRQ Active (Reg 48, bits 27 to 27) [Read Only] */
const aja_register_t ajareg_dma1irq = {0xC0u, 27u, 0x08000000u};


/* Clear DMA 1 IRQ (Reg 49, bits 27 to 27) [Write Only] */
const aja_register_t ajareg_dma1irqclear = {0xC4u, 27u, 0x08000000u};


/* DMA 1 IRQ Enable (Reg 49, bits 0 to 0) [Read/Write] */
const aja_register_t ajareg_dma1irqenable = {0xC4u, 0u, 0x00000001u};


/* DMA 1 Next Descriptor (Reg 35, bits 0 to 31) [Read/Write] */
const aja_register_t ajareg_dma1next = {0x8Cu, 0u, 0xFFFFFFFFu};


/* DMA 1 Next Descriptor Address (MSB 32) (Reg 101, bits 0 to 31) [Read/Write] */
const aja_register_t ajareg_dma1next_high = {0x194u, 0u, 0xFFFFFFFFu};


/* DMA 2 Busy (Reg 48, bits 1 to 1) [Read Only] */
const aja_register_t ajareg_dma2busy = {0xC0u, 1u, 0x00000002u};


/* DMA 2 Card Address (Reg 37, bits 0 to 31) [Read/Write] */
const aja_register_t ajareg_dma2cadd = {0x94u, 0u, 0xFFFFFFFFu};


/* DMA 2 Word Count (Reg 38, bits 0 to 31) [Read/Write] */
const aja_register_t ajareg_dma2count = {0x98u, 0u, 0xFFFFFFFFu};


/* DMA 2 GO (Reg 48, bits 1 to 1) [Write Only] */
const aja_register_t ajareg_dma2go = {0xC0u, 1u, 0x00000002u};


/* DMA 2 Host Address (Reg 36, bits 0 to 31) [Read/Write] */
const aja_register_t ajareg_dma2hadd = {0x90u, 0u, 0xFFFFFFFFu};


/* DMA 1 Host Address (MSB 32) (Reg 102, bits 0 to 31) [Read/Write] */
const aja_register_t ajareg_dma2hadd_high = {0x198u, 0u, 0xFFFFFFFFu};


/* DMA 2 IRQ Active (Reg 48, bits 28 to 28) [Read Only] */
const aja_register_t ajareg_dma2irq = {0xC0u, 28u, 0x10000000u};


/* Clear DMA 2 IRQ (Reg 49, bits 28 to 28) [Write Only] */
const aja_register_t ajareg_dma2irqclear = {0xC4u, 28u, 0x10000000u};


/* DMA 2 IRQ Enable (Reg 49, bits 1 to 1) [Read/Write] */
const aja_register_t ajareg_dma2irqenable = {0xC4u, 1u, 0x00000002u};


/* DMA 2 Next Descriptor (Reg 39, bits 0 to 31) [Read/Write] */
const aja_register_t ajareg_dma2next = {0x9Cu, 0u, 0xFFFFFFFFu};


/* DMA 1 Next Descriptor Address (MSB 32) (Reg 103, bits 0 to 31) [Read/Write] */
const aja_register_t ajareg_dma2next_high = {0x19Cu, 0u, 0xFFFFFFFFu};


/* DMA 3 Busy (Reg 48, bits 2 to 2) [Read Only] */
const aja_register_t ajareg_dma3busy = {0xC0u, 2u, 0x00000004u};


/* DMA 3 Card Address (Reg 41, bits 0 to 31) [Read/Write] */
const aja_register_t ajareg_dma3cadd = {0xA4u, 0u, 0xFFFFFFFFu};


/* DMA 3 Word Count (Reg 42, bits 0 to 31) [Read/Write] */
const aja_register_t ajareg_dma3count = {0xA8u, 0u, 0xFFFFFFFFu};


/* DMA 3 GO (Reg 48, bits 2 to 2) [Write Only] */
const aja_register_t ajareg_dma3go = {0xC0u, 2u, 0x00000004u};


/* DMA 3 Host Address (Reg 40, bits 0 to 31) [Read/Write] */
const aja_register_t ajareg_dma3hadd = {0xA0u, 0u, 0xFFFFFFFFu};


/* DMA 1 Host Address (MSB 32) (Reg 104, bits 0 to 31) [Read/Write] */
const aja_register_t ajareg_dma3hadd_high = {0x1A0u, 0u, 0xFFFFFFFFu};


/* DMA 3 IRQ Active (Reg 48, bits 29 to 29) [Read Only] */
const aja_register_t ajareg_dma3irq = {0xC0u, 29u, 0x20000000u};


/* Clear DMA 3 IRQ (Reg 49, bits 29 to 29) [Write Only] */
const aja_register_t ajareg_dma3irqclear = {0xC4u, 29u, 0x20000000u};


/* DMA 3 IRQ Enable (Reg 49, bits 2 to 2) [Read/Write] */
const aja_register_t ajareg_dma3irqenable = {0xC4u, 2u, 0x00000004u};


/* DMA 3 Next Descriptor (Reg 43, bits 0 to 31) [Read/Write] */
const aja_register_t ajareg_dma3next = {0xACu, 0u, 0xFFFFFFFFu};


/* DMA 1 Next Descriptor Address (MSB 32) (Reg 105, bits 0 to 31) [Read/Write] */
const aja_register_t ajareg_dma3next_high = {0x1A4u, 0u, 0xFFFFFFFFu};


/* DMA 4 Busy (Reg 48, bits 3 to 3) [Read Only] */
const aja_register_t ajareg_dma4busy = {0xC0u, 3u, 0x00000008u};


/* DMA 4 GO (Reg 48, bits 3 to 3) [Write Only] */
const aja_register_t ajareg_dma4go = {0xC0u, 3u, 0x00000008u};


/* DMA 1 Host Address (MSB 32) (Reg 106, bits 0 to 31) [Read/Write] */
const aja_register_t ajareg_dma4hadd_high = {0x1A8u, 0u, 0xFFFFFFFFu};


/* DMA 4 IRQ Active (Reg 48, bits 30 to 30) [Read Only] */
const aja_register_t ajareg_dma4irq = {0xC0u, 30u, 0x40000000u};


/* Clear DMA 4 IRQ (Reg 49, bits 30 to 30) [Write Only] */
const aja_register_t ajareg_dma4irqclear = {0xC4u, 30u, 0x40000000u};


/* DMA 4 IRQ Enable (Reg 49, bits 3 to 3) [Read/Write] */
const aja_register_t ajareg_dma4irqenable = {0xC4u, 3u, 0x00000008u};


/* DMA 1 Next Descriptor Address (MSB 32) (Reg 107, bits 0 to 31) [Read/Write] */
const aja_register_t ajareg_dma4next_high = {0x1ACu, 0u, 0xFFFFFFFFu};


/* Downconversion Mode (Reg 131, bits 4 to 5) [Read/Write] */
/* __ Settings __
 * 2: anamorphic
 * 1: crop
 * 0: letterbox */
const aja_register_t ajareg_downconvmode = {0x20Cu, 4u, 0x00000030u};


/* Embedded Audio Group 1 - Ch 1/2 Present (Reg 23, bits 0 to 0) [Read Only] */
const aja_register_t ajareg_eaud1c12 = {0x5Cu, 0u, 0x00000001u};


/* Embedded Audio Group 1 - Ch 3/4 Present (Reg 23, bits 1 to 1) [Read Only] */
const aja_register_t ajareg_eaud1c34 = {0x5Cu, 1u, 0x00000002u};


/* Output 1 Embedded Audio Supress (Reg 24, bits 13 to 13) [Read/Write] */
/* __ Settings __
 * 0: disabled
 * 1: enabled */
const aja_register_t ajareg_eaud1supress = {0x60u, 13u, 0x00002000u};


/* Embedded Audio Group 2 - Ch 1/2 Present (Reg 23, bits 2 to 2) [Read Only] */
const aja_register_t ajareg_eaud2c12 = {0x5Cu, 2u, 0x00000004u};


/* Embedded Audio Group 2 - Ch 3/4 Present (Reg 23, bits 3 to 3) [Read Only] */
const aja_register_t ajareg_eaud2c34 = {0x5Cu, 3u, 0x00000008u};


/* Output 2 Embedded Audio Supress (Reg 24, bits 15 to 15) [Read/Write] */
/* __ Settings __
 * 0: disabled
 * 1: enabled */
const aja_register_t ajareg_eaud2supress = {0x60u, 15u, 0x00008000u};


/* Embedded Audio Group 3 - Ch 1/2 Present (Reg 23, bits 4 to 4) [Read Only] */
const aja_register_t ajareg_eaud3c12 = {0x5Cu, 4u, 0x00000010u};


/* Embedded Audio Group 3 - Ch 3/4 Present (Reg 23, bits 5 to 5) [Read Only] */
const aja_register_t ajareg_eaud3c34 = {0x5Cu, 5u, 0x00000020u};


/* Embedded Audio Group 4 - Ch 1/2 Present (Reg 23, bits 6 to 6) [Read Only] */
const aja_register_t ajareg_eaud4c12 = {0x5Cu, 6u, 0x00000040u};


/* Embedded Audio Group 4 - Ch 3/4 Present (Reg 23, bits 7 to 7) [Read Only] */
const aja_register_t ajareg_eaud4c34 = {0x5Cu, 7u, 0x00000080u};


/* Embedded Audio Input Select (Reg 25, bits 16 to 16) [Read/Write] */
/* __ Settings __
 * 0: input1
 * 1: input2 */
const aja_register_t ajareg_eaudselect = {0x64u, 16u, 0x00010000u};


/* Embedded Audio Supported (Reg 24, bits 22 to 22) [Read Only] */
const aja_register_t ajareg_eaudsup = {0x60u, 22u, 0x00400000u};


/* Firmware Revision Number (Reg 48, bits 8 to 15) [Read Only] */
const aja_register_t ajareg_firmwarerev = {0xC0u, 8u, 0x0000FF00u};


/* Force card to use 64bit PCI (Reg 48, bits 4 to 4) [Read/Write] */
const aja_register_t ajareg_force64bit = {0xC0u, 4u, 0x00000010u};


/* FPGA Version Number (Reg 21, bits 4 to 11) [Read Only] */
const aja_register_t ajareg_fpgaversion = {0x54u, 4u, 0x00000FF0u};


/* Frame Geometry (Reg 0, bits 3 to 6) [Read/Write] */
/* __ Settings __
 * 1: 1280x720
 * 9: 1280x740
 * 0: 1920x1080
 * 8: 1920x1112
 * 10: 2048x1080
 * 11: 2048x1556
 * 2: 720x486
 * 6: 720x508
 * 3: 720x576
 * 7: 720x598 */
const aja_register_t ajareg_framegeo = {0x0u, 3u, 0x00000078u};


/* Frame Rate (Reg 0, bits 0 to 2) [Read/Write] */
/* __ Settings __
 * 7: 23.976
 * 6: 24
 * 5: 25
 * 4: 29.970
 * 3: 30
 * 2: 59.940
 * 1: 60 */
const aja_register_t ajareg_framerate = {0x0u, 0u, 0x00000007u};


/* Extra bit for 2k framerates (Reg 0, bits 22 to 22) [Read/Write] */
/* __ Settings __
 * 0: disabled
 * 1: enabled */
const aja_register_t ajareg_framerate2k = {0x0u, 22u, 0x00400000u};


/* Horizontal Timing (Reg 14, bits 0 to 15) [Read/Write] */
const aja_register_t ajareg_horiztiming = {0x38u, 0u, 0x0000FFFFu};


/* Input Converter Standard (Reg 131, bits 0 to 2) [Read/Write] */
/* __ Settings __
 * 0: 1080i
 * 4: 1080p
 * 5: 1556i
 * 2: 480i
 * 3: 576i
 * 1: 720p */
const aja_register_t ajareg_inconvstd = {0x20Cu, 0u, 0x00000007u};


/* Input 1 Autotime (Reg 22, bits 3 to 3) [Read Only] */
const aja_register_t ajareg_input1autotime = {0x58u, 3u, 0x00000008u};


/* Input 1 Extended Frame Rate (Reg 22, bits 28 to 28) [Read Only] */
const aja_register_t ajareg_input1extframerate = {0x58u, 28u, 0x10000000u};


/* Input 1 Extended Geometry (Reg 22, bits 30 to 30) [Read Only] */
const aja_register_t ajareg_input1extgeo = {0x58u, 30u, 0x40000000u};


/* Input 1 Field (Reg 21, bits 21 to 21) [Read Only] */
const aja_register_t ajareg_input1field = {0x54u, 21u, 0x00200000u};


/* Input 1 Format (Reg 22, bits 4 to 6) [Read Only] */
/* __ Settings __
 * 7: 1035
 * 4: 1125
 * 5: 1250
 * 1: 525
 * 2: 625
 * 3: 750 */
const aja_register_t ajareg_input1format = {0x58u, 4u, 0x00000070u};


/* Input 1 Frame Rate (Reg 22, bits 0 to 2) [Read Only] */
/* __ Settings __
 * 7: 23.976
 * 6: 24
 * 5: 25
 * 4: 29.970
 * 3: 30
 * 2: 59.940
 * 1: 60 */
const aja_register_t ajareg_input1framerate = {0x58u, 0u, 0x00000007u};


/* Input 1 IRQ Active (Reg 21, bits 30 to 30) [Read Only] */
const aja_register_t ajareg_input1irq = {0x54u, 30u, 0x40000000u};


/* Input 1 IRQ Clear (Reg 20, bits 30 to 30) [Write Only] */
const aja_register_t ajareg_input1irqclear = {0x50u, 30u, 0x40000000u};


/* Input1 IRQ Enable (Reg 20, bits 1 to 1) [Read/Write] */
const aja_register_t ajareg_input1irqenable = {0x50u, 1u, 0x00000002u};


/* Input 1 Progressive Flag (Reg 22, bits 7 to 7) [Read Only] */
const aja_register_t ajareg_input1prog = {0x58u, 7u, 0x00000080u};


/* Input 1 Vertical Blank Active (Reg 21, bits 20 to 20) [Read Only] */
const aja_register_t ajareg_input1vblank = {0x54u, 20u, 0x00100000u};


/* Input 2 Autotime (Reg 22, bits 11 to 11) [Read Only] */
const aja_register_t ajareg_input2autotime = {0x58u, 11u, 0x00000800u};


/* Input 2 Extended Frame Rave (Reg 22, bits 29 to 29) [Read Only] */
const aja_register_t ajareg_input2extframerate = {0x58u, 29u, 0x20000000u};


/* Input 2 Extended Frame Geometry (Reg 22, bits 31 to 31) [Read Only] */
const aja_register_t ajareg_input2extgeo = {0x58u, 31u, 0x80000000u};


/* Input 2 Field (Reg 21, bits 19 to 19) [Read Only] */
const aja_register_t ajareg_input2field = {0x54u, 19u, 0x00080000u};


/* Input 2 Format (Reg 22, bits 12 to 14) [Read Only] */
/* __ Settings __
 * 7: 1035
 * 4: 1125
 * 5: 1250
 * 1: 525
 * 2: 625
 * 3: 750 */
const aja_register_t ajareg_input2format = {0x58u, 12u, 0x00007000u};


/* Input 2 Frame Rate (Reg 22, bits 8 to 10) [Read Only] */
/* __ Settings __
 * 7: 23.976
 * 6: 24
 * 5: 25
 * 4: 29.970
 * 3: 30
 * 2: 59.940
 * 1: 60 */
const aja_register_t ajareg_input2framerate = {0x58u, 8u, 0x00000700u};


/* Input 2 IRQ Active (Reg 21, bits 29 to 29) [Read Only] */
const aja_register_t ajareg_input2irq = {0x54u, 29u, 0x20000000u};


/* Input 2 IRQ Clear (Reg 20, bits 29 to 29) [Write Only] */
const aja_register_t ajareg_input2irqclear = {0x50u, 29u, 0x20000000u};


/* Input2 IRQ Enable (Reg 20, bits 2 to 2) [Read/Write] */
const aja_register_t ajareg_input2irqenable = {0x50u, 2u, 0x00000004u};


/* Input 2 Progressive Flag (Reg 22, bits 15 to 15) [Read Only] */
const aja_register_t ajareg_input2prog = {0x58u, 15u, 0x00008000u};


/* Input 2 Vertical Blank Active (Reg 21, bits 18 to 18) [Read Only] */
const aja_register_t ajareg_input2vblank = {0x54u, 18u, 0x00040000u};


/* KBOX Input Selection (Reg 24, bits 26 to 26) [Read/Write] */
/* __ Settings __
 * 0: bnc
 * 1: xlr */
const aja_register_t ajareg_kboxinput = {0x60u, 26u, 0x04000000u};


/* KBOX Audio Monitor Output (Reg 24, bits 24 to 25) [Read/Write] */
/* __ Settings __
 * 0: ch12
 * 1: ch34
 * 2: ch56
 * 3: ch78 */
const aja_register_t ajareg_kboxmonitor = {0x60u, 24u, 0x03000000u};


/* Card LEDs (Reg 0, bits 16 to 19) [Read/Write] */
const aja_register_t ajareg_leds = {0x0u, 16u, 0x000F0000u};


/* LUT 1 Crosspoint (Reg 136, bits 0 to 7) [Read/Write] */
/* __ Settings __
 * 0: black
 * 0x88: chan1_rgb
 * 0x8F: chan2_rgb
 * 0x85: csconv1_rgb
 * 0x90: csconv2_rgb
 * 0x83: dlinput */
const aja_register_t ajareg_lut1xpt = {0x220u, 0u, 0x000000FFu};


/* LUT 2 Crosspoint (Reg 140, bits 8 to 15) [Read/Write] */
/* __ Settings __
 * 0: black
 * 0x88: chan1_rgb
 * 0x8F: chan2_rgb
 * 0x85: csconv1_rgb
 * 0x90: csconv2_rgb
 * 0x83: dlinput */
const aja_register_t ajareg_lut2xpt = {0x230u, 8u, 0x0000FF00u};


/* Matte Cb Value (Reg 13, bits 0 to 9) [Read/Write] */
const aja_register_t ajareg_mattecb = {0x34u, 0u, 0x000003FFu};


/* Matte Cr Value (Reg 13, bits 20 to 29) [Read/Write] */
const aja_register_t ajareg_mattecr = {0x34u, 20u, 0x3FF00000u};


/* Matte Y Value (Reg 13, bits 10 to 19) [Read/Write] */
const aja_register_t ajareg_mattey = {0x34u, 10u, 0x000FFC00u};


/* Mixer Background Key Crosspoint (Reg 139, bits 24 to 31) [Read/Write] */
/* __ Settings __
 * 0: black
 * 8: chan1_ycbcr
 * 0xF: chan2_ycbcr
 * 0x85: csconv1_rgb
 * 0xE: csconv1key_ycbcr
 * 0x10: csconv2_ycbcr
 * 0x11: csconv2key_ycbcr
 * 1: input1
 * 2: input2
 * 0x13: mixkey_ycbcr
 * 6: resconv */
const aja_register_t ajareg_mixbgkeyxpt = {0x22Cu, 24u, 0xFF000000u};


/* Mixer Background Video Crosspoint (Reg 139, bits 16 to 23) [Read/Write] */
/* __ Settings __
 * 0: black
 * 8: chan1_ycbcr
 * 0xF: chan2_ycbcr
 * 0x85: csconv1_rgb
 * 5: csconv1_ycbcr
 * 0x90: csconv2_rgb
 * 0x10: csconv2_ycbcr
 * 1: input1
 * 2: input2
 * 0x12: mix_ycbcr
 * 6: resconv */
const aja_register_t ajareg_mixbgvidxpt = {0x22Cu, 16u, 0x00FF0000u};


/* Mixer Value (Reg 11, bits 0 to 31) [Read/Write] */
const aja_register_t ajareg_mixer = {0x2Cu, 0u, 0xFFFFFFFFu};


/* Mixer Foreground Key Crosspoint (Reg 139, bits 8 to 15) [Read/Write] */
/* __ Settings __
 * 0: black
 * 8: chan1_ycbcr
 * 0xF: chan2_ycbcr
 * 0x85: csconv1_rgb
 * 0xE: csconv1key_ycbcr
 * 0x10: csconv2_ycbcr
 * 0x11: csconv2key_ycbcr
 * 1: input1
 * 2: input2
 * 0x13: mixkey_ycbcr
 * 6: resconv */
const aja_register_t ajareg_mixfgkeyxpt = {0x22Cu, 8u, 0x0000FF00u};


/* Mixer Foreground Video Crosspoint (Reg 139, bits 0 to 7) [Read/Write] */
/* __ Settings __
 * 0: black
 * 8: chan1_ycbcr
 * 0xF: chan2_ycbcr
 * 0x85: csconv1_rgb
 * 5: csconv1_ycbcr
 * 0x90: csconv2_rgb
 * 0x10: csconv2_ycbcr
 * 1: input1
 * 2: input2
 * 0x12: mix_ycbcr
 * 6: resconv */
const aja_register_t ajareg_mixfgvidxpt = {0x22Cu, 0u, 0x000000FFu};


/* Output Converter Standard (Reg 131, bits 12 to 14) [Read/Write] */
/* __ Settings __
 * 0: 1080i
 * 4: 1080p
 * 5: 1556i
 * 2: 480i
 * 3: 576i
 * 1: 720p */
const aja_register_t ajareg_outconvstd = {0x20Cu, 12u, 0x00007000u};


/* Output Field (Reg 21, bits 23 to 23) [Read Only] */
const aja_register_t ajareg_outputfield = {0x54u, 23u, 0x00800000u};


/* Output Active (Reg 21, bits 31 to 31) [Read Only] */
const aja_register_t ajareg_outputirq = {0x54u, 31u, 0x80000000u};


/* Output IRQ Clear (Reg 20, bits 31 to 31) [Write Only] */
const aja_register_t ajareg_outputirqclear = {0x50u, 31u, 0x80000000u};


/* Output IRQ Enable (Reg 20, bits 0 to 0) [Read/Write] */
const aja_register_t ajareg_outputirqenable = {0x50u, 0u, 0x00000001u};


/* Output Line Number (Reg 18, bits 0 to 31) [Read Only] */
const aja_register_t ajareg_outputline = {0x48u, 0u, 0xFFFFFFFFu};


/* Output Vertical Blank Active (Reg 21, bits 22 to 22) [Read Only] */
const aja_register_t ajareg_outputvblank = {0x54u, 22u, 0x00400000u};


/* Pan Horizontal Offset (Reg 15, bits 0 to 11) [Read/Write] */
const aja_register_t ajareg_panhoriz = {0x3Cu, 0u, 0x00000FFFu};


/* Pan Vertical Offset (Reg 15, bits 12 to 23) [Read/Write] */
const aja_register_t ajareg_panvert = {0x3Cu, 12u, 0x00FFF000u};


/* Pan window size (Reg 15, bits 30 to 31) [Read/Write] */
/* __ Settings __
 * 3: 1920x1080
 * 2: 2048x1080
 * 0: disabled
 * 1: reserved */
const aja_register_t ajareg_panwindow = {0x3Cu, 30u, 0xC0000000u};


/* Reference Format (Reg 22, bits 20 to 22) [Read Only] */
/* __ Settings __
 * 7: 1035
 * 4: 1125
 * 5: 1250
 * 1: 525
 * 2: 625
 * 3: 750 */
const aja_register_t ajareg_refformat = {0x58u, 20u, 0x00700000u};


/* Reference Frame Rate (Reg 22, bits 16 to 19) [Read Only] */
/* __ Settings __
 * 7: 23.976
 * 6: 24
 * 5: 25
 * 4: 29.970
 * 3: 30
 * 2: 59.940
 * 1: 60 */
const aja_register_t ajareg_refframerate = {0x58u, 16u, 0x000F0000u};


/* Reference Progressive Flag (Reg 22, bits 23 to 23) [Read Only] */
const aja_register_t ajareg_refprog = {0x58u, 23u, 0x00800000u};


/* Reference Source (Reg 0, bits 10 to 11) [Read/Write] */
/* __ Settings __
 * 3: freerun
 * 1: input1
 * 2: input2
 * 0: refin */
const aja_register_t ajareg_refsource = {0x0u, 10u, 0x00000C00u};


/* Reference Voltage (Reg 0, bits 12 to 12) [Read/Write] */
/* __ Settings __
 * 0: 1v
 * 1: 4v */
const aja_register_t ajareg_refvoltage = {0x0u, 12u, 0x00001000u};


/* Register Clocking (Reg 0, bits 20 to 21) [Read/Write] */
/* __ Settings __
 * 0: field
 * 1: frame
 * 2: immediate
 * 3: line10 */
const aja_register_t ajareg_regclocking = {0x0u, 20u, 0x00300000u};


/* Resolution converter add 2:3 (Reg 131, bits 6 to 6) [Read/Write] */
/* __ Settings __
 * 0: disabled
 * 1: enabled */
const aja_register_t ajareg_resconv23 = {0x20Cu, 6u, 0x00000040u};


/* SD Anamorphic Conversion Mode (Reg 131, bits 20 to 21) [Read/Write] */
/* __ Settings __
 * 1: hcrop
 * 0: letterbox
 * 2: pillarbox
 * 3: vcrop */
const aja_register_t ajareg_resconvsdanim = {0x20Cu, 20u, 0x00300000u};


/* Up/Down Converter Crosspoint (Reg 136, bits 16 to 23) [Read/Write] */
/* __ Settings __
 * 0: black
 * 8: chan1_ycbcr
 * 0xF: chan2_ycbcr
 * 0x85: csconv1_rgb
 * 5: csconv1_ycbcr
 * 0x90: csconv2_rgb
 * 0x10: csconv2_ycbcr
 * 1: input1
 * 2: input2
 * 0x84: lut1_rgb
 * 4: lut1_ycbcr
 * 0x8D: lut2_rgb
 * 9: sync1_ycbcr
 * 0xA: sync2_ycbcr */
const aja_register_t ajareg_resconvxpt = {0x220u, 16u, 0x00FF0000u};


/* SDI 1 Output 2048x1080 mode (Reg 129, bits 3 to 3) [Read/Write] */
/* __ Settings __
 * 0: disabled
 * 1: enabled */
const aja_register_t ajareg_sdi1out2kline = {0x204u, 3u, 0x00000008u};


/* SDI 1 Output HBlank RGB range (Reg 129, bits 7 to 7) [Read/Write] */
/* __ Settings __
 * 0: black@0x00
 * 1: black@0x40 */
const aja_register_t ajareg_sdi1outhblankrgb = {0x204u, 7u, 0x00000080u};


/* SDI 1 Output Standard (Reg 129, bits 0 to 2) [Read/Write] */
/* __ Settings __
 * 0: 1080i
 * 4: 1080p
 * 5: 1556i
 * 2: 480i
 * 3: 576i
 * 1: 720p */
const aja_register_t ajareg_sdi1outstd = {0x204u, 0u, 0x00000007u};


/* SDI 1 Output Crosspoint (Reg 138, bits 8 to 15) [Read/Write] */
/* __ Settings __
 * 0: black
 * 8: chan1_ycbcr
 * 0xF: chan2_ycbcr
 * 7: compress
 * 5: csconv1_ycbcr
 * 0xE: csconv1key_ycbcr
 * 0x10: csconv2_ycbcr
 * 0x11: csconv2key_ycbcr
 * 0xB: dlout
 * 1: input1
 * 2: input2
 * 0x12: mix_ycbcr
 * 0x13: mixkey_ycbcr
 * 6: resconv
 * 9: sync1_ycbcr
 * 0xA: sync2_ycbcr */
const aja_register_t ajareg_sdi1outxpt = {0x228u, 8u, 0x0000FF00u};


/* SDI 2 Output 2048x1080 mode (Reg 130, bits 3 to 3) [Read/Write] */
/* __ Settings __
 * 0: disabled
 * 1: enabled */
const aja_register_t ajareg_sdi2out2kline = {0x208u, 3u, 0x00000008u};


/* SDI 2 Output HBlank RGB range (Reg 130, bits 7 to 7) [Read/Write] */
/* __ Settings __
 * 0: black@0x00
 * 1: black@0x40 */
const aja_register_t ajareg_sdi2outhblankrgb = {0x208u, 7u, 0x00000080u};


/* SDI 2 Output Standard (Reg 130, bits 0 to 2) [Read/Write] */
/* __ Settings __
 * 0: 1080i
 * 4: 1080p
 * 5: 1556i
 * 2: 480i
 * 3: 576i
 * 1: 720p */
const aja_register_t ajareg_sdi2outstd = {0x208u, 0u, 0x00000007u};


/* SDI 2 Output Crosspoint (Reg 138, bits 16 to 23) [Read/Write] */
/* __ Settings __
 * 0: black
 * 8: chan1_ycbcr
 * 0xF: chan2_ycbcr
 * 7: compress
 * 5: csconv1_ycbcr
 * 0xE: csconv1key_ycbcr
 * 0x10: csconv2_ycbcr
 * 0x11: csconv2key_ycbcr
 * 0xB: dlout
 * 1: input1
 * 2: input2
 * 0x12: mix_ycbcr
 * 0x13: mixkey_ycbcr
 * 6: resconv
 * 9: sync1_ycbcr
 * 0xA: sync2_ycbcr */
const aja_register_t ajareg_sdi2outxpt = {0x228u, 16u, 0x00FF0000u};


/* Board Serial High (Reg 55, bits 0 to 31) [Read Only] */
const aja_register_t ajareg_serialhigh = {0xDCu, 0u, 0xFFFFFFFFu};


/* Board Serial Low (Reg 54, bits 0 to 31) [Read Only] */
const aja_register_t ajareg_seriallow = {0xD8u, 0u, 0xFFFFFFFFu};


/* Split Screen Slope (Reg 12, bits 16 to 29) [Read/Write] */
const aja_register_t ajareg_splitslope = {0x30u, 16u, 0x3FFF0000u};


/* Split Screen Start (Reg 12, bits 0 to 15) [Read/Write] */
const aja_register_t ajareg_splitstart = {0x30u, 0u, 0x0000FFFFu};


/* Split Screen Type (Reg 12, bits 30 to 31) [Read/Write] */
const aja_register_t ajareg_splittype = {0x30u, 30u, 0xC0000000u};


/* Video Standard (Reg 0, bits 7 to 9) [Read/Write] */
/* __ Settings __
 * 0: 1080i
 * 4: 1080p
 * 2: 480i
 * 3: 576i
 * 1: 720p */
const aja_register_t ajareg_standard = {0x0u, 7u, 0x00000380u};


/* Strap Resistor Enabled (Reg 48, bits 7 to 7) [Read/Write] */
const aja_register_t ajareg_strapenabled = {0xC0u, 7u, 0x00000080u};


/* UART recieve enable (Reg 72, bits 3 to 3) [Read/Write] */
const aja_register_t ajareg_uartenablerx = {0x120u, 3u, 0x00000008u};


/* UART transmit enable (Reg 72, bits 0 to 0) [Read/Write] */
const aja_register_t ajareg_uartenabletx = {0x120u, 0u, 0x00000001u};


/* UART recieve data (Reg 71, bits 0 to 7) [Read Only] */
const aja_register_t ajareg_uartin = {0x11Cu, 0u, 0x000000FFu};


/* UART transmit data (Reg 70, bits 0 to 7) [Write Only] */
const aja_register_t ajareg_uartout = {0x118u, 0u, 0x000000FFu};


/* UART Rx IRQ Active (Reg 21, bits 15 to 15) [Read Only] */
const aja_register_t ajareg_uartrxirq = {0x54u, 15u, 0x00008000u};


/* UART Rx IRQ Clear (Reg 20, bits 15 to 15) [Write Only] */
const aja_register_t ajareg_uartrxirqclear = {0x50u, 15u, 0x00008000u};


/* UART Rx IRQ Enable (Reg 20, bits 8 to 8) [Read/Write] */
const aja_register_t ajareg_uartrxirqenable = {0x50u, 8u, 0x00000100u};


/* UART rx fifo overrun (Reg 72, bits 7 to 7) [Read/Write] */
const aja_register_t ajareg_uartrxoverrun = {0x120u, 7u, 0x00000080u};


/* UART rx parity error (Reg 72, bits 6 to 6) [Read/Write] */
const aja_register_t ajareg_uartrxparityerror = {0x120u, 6u, 0x00000040u};


/* UART recieve status (Reg 72, bits 4 to 7) [Read/Write] */
const aja_register_t ajareg_uartstatusrx = {0x120u, 4u, 0x000000F0u};


/* UART transmit fifo status (Reg 72, bits 1 to 2) [Read Only] */
/* __ Settings __
 * 1: empty
 * 2: full
 * 0: hasdata
 * 3: undefined */
const aja_register_t ajareg_uartstatustx = {0x120u, 1u, 0x00000006u};


/* UART Tx IRQ Active (Reg 21, bits 24 to 24) [Read Only] */
const aja_register_t ajareg_uarttxirq = {0x54u, 24u, 0x01000000u};


/* UART Tx IRQ Clear (Reg 20, bits 24 to 24) [Write Only] */
const aja_register_t ajareg_uarttxirqclear = {0x50u, 24u, 0x01000000u};


/* UART Tx IRQ Enable (Reg 20, bits 7 to 7) [Read/Write] */
const aja_register_t ajareg_uarttxirqenable = {0x50u, 7u, 0x00000080u};


/* Upconversion Mode (Reg 131, bits 8 to 10) [Read/Write] */
/* __ Settings __
 * 0: anamorphic
 * 1: pillarbox_4x3
 * 2: zoom_14x9
 * 3: zoom_letterbox
 * 4: zoom_wide */
const aja_register_t ajareg_upconvmode = {0x20Cu, 8u, 0x00000700u};


/* Vertical Timing (Reg 14, bits 16 to 31) [Read/Write] */
const aja_register_t ajareg_verttiming = {0x38u, 16u, 0xFFFF0000u};


/* Video Firmware Data (Reg 17, bits 0 to 7) [Write Only] */
const aja_register_t ajareg_vidfw_data = {0x44u, 0u, 0x000000FFu};


/* Video Firmware Done (Reg 17, bits 9 to 9) [Read Only] */
const aja_register_t ajareg_vidfw_done = {0x44u, 9u, 0x00000200u};


/* Video Firmware Programming PCI-X programming mode (Reg 17, bits 29 to 29) [Read/Write] */
const aja_register_t ajareg_vidfw_pcix = {0x44u, 29u, 0x20000000u};


/* Video Firmware Program (Reg 17, bits 8 to 8) [Write Only] */
const aja_register_t ajareg_vidfw_program = {0x44u, 8u, 0x00000100u};


/* Video Firmware Ready (Reg 17, bits 8 to 8) [Read Only] */
const aja_register_t ajareg_vidfw_ready = {0x44u, 8u, 0x00000100u};


/* Video Firmware Reset (Reg 17, bits 10 to 10) [Write Only] */
const aja_register_t ajareg_vidfw_reset = {0x44u, 10u, 0x00000400u};


/* Virtex Interrupt Validation (Reg 48, bits 26 to 26) [Read Only] */
const aja_register_t ajareg_viv = {0xC0u, 26u, 0x04000000u};


/* Video Processing Control - Background Control (Reg 9, bits 22 to 23) [Read/Write] */
/* __ Settings __
 * 0: full
 * 1: shaped
 * 2: unshaped */
const aja_register_t ajareg_vpc_bgcont = {0x24u, 22u, 0x00C00000u};


/* Video Processing Control - Foreground Control (Reg 9, bits 20 to 21) [Read/Write] */
/* __ Settings __
 * 0: full
 * 1: shaped
 * 2: unshaped */
const aja_register_t ajareg_vpc_fgcont = {0x24u, 20u, 0x00300000u};


/* Video Processing Control - Limiting (Reg 9, bits 11 to 12) [Read/Write] */
/* __ Settings __
 * 2: broadcast
 * 1: illegal
 * 0: legalsdi */
const aja_register_t ajareg_vpc_limiting = {0x24u, 11u, 0x00001800u};


/* Video Processing Control - Mode (Reg 9, bits 24 to 25) [Read/Write] */
/* __ Settings __
 * 3: fgoff
 * 0: fgon
 * 1: mix
 * 2: split */
const aja_register_t ajareg_vpc_mode = {0x24u, 24u, 0x03000000u};


/* Video Processing Control - Mux1 (Reg 9, bits 0 to 1) [Read/Write] */
/* __ Settings __
 * 1: fgv
 * 0: zero */
const aja_register_t ajareg_vpc_mux1 = {0x24u, 0u, 0x00000003u};


/* Video Processing Control - Mux2 (Reg 9, bits 2 to 3) [Read/Write] */
/* __ Settings __
 * 0: fkey
 * 1: mix
 * 2: split */
const aja_register_t ajareg_vpc_mux2 = {0x24u, 2u, 0x0000000Cu};


/* Video Processint Control - Mux3 (Reg 9, bits 4 to 5) [Read/Write] */
/* __ Settings __
 * 1: fgv
 * 0: zero */
const aja_register_t ajareg_vpc_mux3 = {0x24u, 4u, 0x00000030u};


/* Video Processing Control - Mux4 (Reg 9, bits 6 to 7) [Read/Write] */
/* __ Settings __
 * 0: bgv
 * 1: bgvxbgkey */
const aja_register_t ajareg_vpc_mux4 = {0x24u, 6u, 0x000000C0u};


/* Video Processing Control - Mux5 (Reg 9, bits 8 to 10) [Read/Write] */
/* __ Settings __
 * 3: bgkey
 * 0: bgv
 * 2: fgkey
 * 1: fgv
 * 4: keymix
 * 5: secv */
const aja_register_t ajareg_vpc_mux5 = {0x24u, 8u, 0x00000700u};


/* Video Processing Control - Standard (Reg 9, bits 28 to 30) [Read/Write] */
/* __ Settings __
 * 0: 1080i
 * 4: 1080p
 * 5: 1556i
 * 2: 480i
 * 3: 576i
 * 1: 720p */
const aja_register_t ajareg_vpc_standard = {0x24u, 28u, 0x70000000u};


/* Video Processing Control - Sync Fail (Reg 9, bits 27 to 27) [Read Only] */
/* __ Settings __
 * 0: insync
 * 1: outofsync */
const aja_register_t ajareg_vpc_syncfail = {0x24u, 27u, 0x08000000u};


/* Video Processing Crosspoint - Background Key (Reg 10, bits 12 to 14) [Read/Write] */
/* __ Settings __
 * 0: chan1key
 * 1: chan2key
 * 2: input1
 * 3: input2
 * 4: matte */
const aja_register_t ajareg_vpcc_bgkey = {0x28u, 12u, 0x00007000u};


/* Video Processing Crosspoint - Background Video (Reg 10, bits 4 to 6) [Read/Write] */
/* __ Settings __
 * 0: chan1
 * 5: chan1key
 * 1: chan2
 * 6: chan2key
 * 2: input1
 * 3: input2
 * 4: matte */
const aja_register_t ajareg_vpcc_bgv = {0x28u, 4u, 0x00000070u};


/* Video Processing Crosspoint - Foreground Key (Reg 10, bits 8 to 10) [Read/Write] */
/* __ Settings __
 * 0: chan1key
 * 1: chan2key
 * 2: input1
 * 3: input2
 * 4: matte */
const aja_register_t ajareg_vpcc_fgkey = {0x28u, 8u, 0x00000700u};


/* Video Processing Crosspoint - Foreground Video (Reg 10, bits 0 to 2) [Read/Write] */
/* __ Settings __
 * 0: chan1
 * 5: chan1key
 * 1: chan2
 * 6: chan2key
 * 2: input1
 * 3: input2
 * 4: matte */
const aja_register_t ajareg_vpcc_fgv = {0x28u, 0u, 0x00000007u};


/* Video Processing Crosspoint - Secondary Video (Reg 10, bits 16 to 18) [Read/Write] */
/* __ Settings __
 * 0: chan1key
 * 1: chan2key
 * 2: input1
 * 3: input2
 * 4: matte */
const aja_register_t ajareg_vpcc_secv = {0x28u, 16u, 0x00070000u};



#endif /* _AJA_REGISTERS_H_ defined */

